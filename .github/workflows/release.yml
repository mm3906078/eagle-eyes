name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  ELIXIR_VERSION: '1.16.2'
  OTP_VERSION: '26.0'

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Compile (warnings as errors)
        run: mix compile --warnings-as-errors

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run tests
        run: mix test --trace

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ env.ELIXIR_VERSION }}
          otp-version: ${{ env.OTP_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Get version
        id: version
        run: |
          VERSION=$(grep 'version:' mix.exs | head -1 | sed 's/.*version: "\(.*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Compile the app
        run: make compile

      - name: Release master
        run: make release_master

      - name: Release agent
        run: make release_agent

      - name: Upload Release agent
        uses: actions/upload-artifact@v4
        with:
          name: agent-${{ steps.version.outputs.version }}
          path: _build/prod/agent-*.tar.gz

      - name: Upload Release master
        uses: actions/upload-artifact@v4
        with:
          name: master-${{ steps.version.outputs.version }}
          path: _build/prod/master-*.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download agent artifact
        uses: actions/download-artifact@v4
        with:
          name: agent-${{ needs.build.outputs.version }}
          path: ./artifacts/

      - name: Download master artifact
        uses: actions/download-artifact@v4
        with:
          name: master-${{ needs.build.outputs.version }}
          path: ./artifacts/

      - name: Get release info
        id: release_info
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.tag_name }}
          name: Release ${{ steps.release_info.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/agent-*.tar.gz
            ./artifacts/master-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
